#version 460
#extension GL_EXT_buffer_reference: require
#extension GL_EXT_nonuniform_qualifier: require


struct Vertex {
    vec3 pos;
    float uv1;
    vec3 normal;
    float uv2;
};

struct Triangle {
    uint v0;
    uint v1;
    uint v2;
    float pad;
    vec3 tangent;
};

struct Material {
    vec3 baseCol;
    int baseColMapIndex;
    float emissiveStrength;
    int emissiveMapIndex;
    float roughness;
    int roughnessMapIndex;
    float metallic;
    int metallicMapIndex;
    int normalMapIndex;
};

struct Node {
    vec3 aabbMin;
    uint triangleCount;
    vec3 aabbMax;
    uint index;
};

struct MeshInfo {
    uint vertexOffset;
    uint triangleOffset;
    uint nodeOffset;
    uint materialIndex;
};

struct Ray {
    vec3 ro;
    vec3 rd;
};

struct HitInfo {
    bool hit;
    float dist;
    vec3 normal;
    Material material;
    uint triIndex;
    uint vertexOffset;
};

struct Surface {
    vec3 albedo;
    vec3 normal;
    float roughness;
    float metallic;
};

struct Camera {
    vec3 pos;
    mat4 invView;
    mat4 invProj;
};



layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform globalBuffer {
    Camera cam;
};
layout (set = 0, binding = 1) uniform samplerCube envMap;
layout (rgba32f, set = 1, binding = 0) uniform image2D drawImage;
layout (set = 1, binding = 1) uniform sampler2D textures[];
layout (buffer_reference, std430) readonly buffer VertexBuffer {
    Vertex vertices[];
} vertices;
layout (buffer_reference, std430) readonly buffer TriangleBuffer {
    Triangle triangles[];
};
layout (buffer_reference, std430) readonly buffer MaterialBuffer {
    Material materials[];
};
layout (buffer_reference, std430) readonly buffer NodeBuffer {
    Node nodes[];
};
layout (buffer_reference, std430) readonly buffer MeshInfoBuffer {
    MeshInfo meshInfos[];
};
layout (push_constant) uniform constants
{
    VertexBuffer vertexBuffer;
    TriangleBuffer triangleBuffer;
    NodeBuffer nodeBuffer;
    MaterialBuffer materialBuffer;
    MeshInfoBuffer meshInfoBuffer;
    uint meshCount;
    uint frame;
    uint bounces;
    uint samples;
    float jitter;
    uint smoothShading;
    float envMapIntensity;
    uint envMapVisbility;
} PushConstants;

 // #define BRDF_DEBUGGING
const float PI = 3.14159265359f;
const float JITTER_CONSTANT = 0.00002;
const float MAX_ENV_MAP_VALUE = 5.0;

// ======== RANDOM FUNCTIONS =========
uint wang_hash(inout uint seed) {
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}

float randomFloat01(inout uint state) {
    return float(wang_hash(state)) / 4294967296.0;
}

vec3 randomUnitVector(inout uint state) {
    float z = randomFloat01(state) * 2.0f - 1.0f;
    float a = randomFloat01(state) * 2.0 * PI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}
// ====================================


// =========== RAY SURFACE ============
float rayAABBIntersect(Ray ray, vec3 bmin, vec3 bmax) {
    float tx1 = (bmin.x - ray.ro.x) / ray.rd.x;
    float tx2 = (bmax.x - ray.ro.x) / ray.rd.x;
    float tmin = min(tx1, tx2);
    float tmax = max(tx1, tx2);
    float ty1 = (bmin.y - ray.ro.y) / ray.rd.y;
    float ty2 = (bmax.y - ray.ro.y) / ray.rd.y;
    tmin = max(tmin, min(ty1, ty2));
    tmax = min(tmax, max(ty1, ty2));
    float tz1 = (bmin.z - ray.ro.z) / ray.rd.z;
    float tz2 = (bmax.z - ray.ro.z) / ray.rd.z;
    tmin = max(tmin, min(tz1, tz2));
    tmax = min(tmax, max(tz1, tz2));
    bool hit = tmax >= tmin && tmax > 0;
    return hit ? tmin : 1e10;
}

HitInfo rayTriangleIntersect(Ray ray, Triangle tri, uint vertexOffset) {
    HitInfo hi;
    hi.hit = false;
    hi.dist = -1.0;

    vec3 v0 = PushConstants.vertexBuffer.vertices[tri.v0 + vertexOffset].pos;
    vec3 v1 = PushConstants.vertexBuffer.vertices[tri.v1 + vertexOffset].pos;
    vec3 v2 = PushConstants.vertexBuffer.vertices[tri.v2 + vertexOffset].pos;

    vec3 v1v0 = v1 - v0;
    vec3 v2v0 = v2 - v0;
    vec3 rov0 = ray.ro - v0;
    vec3 n = cross(v1v0, v2v0);

    vec3 q = cross(rov0, ray.rd);
    float d = 1.0 / dot(ray.rd, n);
    float u = d * dot(-q, v2v0);
    float v = d * dot(q, v1v0);
    hi.dist = d * dot(-n, rov0);

    if (u >= 0.0 && v >= 0.0 && (u + v) <= 1.0 && hi.dist > 0.0) {
        hi.hit = true;
        hi.normal = normalize(n);
    }

    return hi;
}

vec3 calculateBarycentric(vec3 pos, vec3 a, vec3 b, vec3 c) {
    vec3 v0 = b - a; vec3 v1 = c - a; vec3 v2 = pos - a;
    float d00 = dot(v0, v0);
    float d01 = dot(v0, v1);
    float d11 = dot(v1, v1);
    float d20 = dot(v2, v0);
    float d21 = dot(v2, v1);
    float denom = d00 * d11 - d01 * d01;
    vec3 bar;
    bar.y = (d11 * d20 - d01 * d21) / denom;
    bar.z = (d00 * d21 - d01 * d20) / denom;
    bar.x = 1.0f - bar.y - bar.z;
    return bar;
}


HitInfo intersect(Ray ray) {
    HitInfo hi;
    hi.dist = 1e10;
    hi.hit = false;

    for (uint m = 0; m < PushConstants.meshCount; m++) {
        MeshInfo meshInfo = PushConstants.meshInfoBuffer.meshInfos[m];
        uint stack[32];
        uint currStackIndex = 0;
        stack[currStackIndex++] = 0;

        while (currStackIndex > 0) {
            Node node = PushConstants.nodeBuffer.nodes[stack[--currStackIndex] + meshInfo.nodeOffset];

            // Leaf node
            if (node.triangleCount > 0) {
                for (uint i = node.index; i < node.index + node.triangleCount; i++) {
                    HitInfo triangleHi = rayTriangleIntersect(ray, PushConstants.triangleBuffer.triangles[i + meshInfo.triangleOffset], meshInfo.vertexOffset);
                    if (triangleHi.hit && (triangleHi.dist < hi.dist)) {
                        hi = triangleHi;
                        hi.material = PushConstants.materialBuffer.materials[meshInfo.materialIndex];
                        hi.triIndex = i + meshInfo.triangleOffset;
                        hi.vertexOffset = meshInfo.vertexOffset;
                    }
                }
            } else {
                // The closest child will be looked at first
                Node left = PushConstants.nodeBuffer.nodes[node.index + meshInfo.nodeOffset];
                Node right = PushConstants.nodeBuffer.nodes[node.index + meshInfo.nodeOffset + 1];
                float distLeft = rayAABBIntersect(ray, left.aabbMin, left.aabbMax);
                float distRight = rayAABBIntersect(ray, right.aabbMin, right.aabbMax);

                bool isLeftNearest = distLeft < distRight;
                float distNear = isLeftNearest ? distLeft : distRight;
                float distFar = isLeftNearest ? distRight : distLeft;

                if (distFar < hi.dist) stack[currStackIndex++] = isLeftNearest ? node.index + 1 : node.index;
                if (distNear < hi.dist) stack[currStackIndex++] = isLeftNearest ? node.index : node.index + 1;
            }
        }
    }

    return hi;
}
// ====================================
float luma(vec3 color) {
    return dot(color, vec3(0.2, 0.6, 0.2));
}

vec3 F_Schlick(vec3 f0, float VdotH) {
    return f0 + (1. -f0) * pow(1.0 - VdotH, 5.);
}

vec3 sampleGGXVNDF(vec2 u, vec3 wi, float alpha, vec3 n)
{
    // decompose the vector in parallel and perpendicular components
    vec3 wi_z = n * dot(wi, n);
    vec3 wi_xy = wi - wi_z;
    // warp to the hemisphere configuration
    vec3 wiStd = normalize(wi_z - alpha * wi_xy);
    // sample a spherical cap in (-wiStd.z, 1]
    float wiStd_z = dot(wiStd, n);
    float phi = (2.0f * u.x - 1.0f) * PI;
    float z = (1.0f - u.y) * (1.0f + wiStd_z) - wiStd_z;
    float sinTheta = sqrt(clamp(1.0f - z * z, 0.0f, 1.0f));
    float x = sinTheta * cos(phi);
    float y = sinTheta * sin(phi);
    vec3 cStd = vec3(x, y, z);
    // reflect sample to align with normal
    vec3 up = vec3(0, 0, 1);
    vec3 wr = n + up;
    vec3 c = dot(wr, cStd) * wr / wr.z - cStd;
    // compute halfway direction as standard normal
    vec3 wmStd = c + wiStd;
    vec3 wmStd_z = n * dot(n, wmStd);
    vec3 wmStd_xy = wmStd_z - wmStd;
    // warp back to the ellipsoid configuration
    vec3 wm = normalize(wmStd_z + alpha * wmStd_xy);
    // return final normal
    return wm;
}


float lambdaSmith(float ndotx, float alpha)
{
    float alpha_sqr = alpha * alpha;
    float ndotx_sqr = ndotx * ndotx;
    return (-1.0 + sqrt(alpha_sqr * (1.0 - ndotx_sqr) / ndotx_sqr + 1.0)) * 0.5;
}

float smith_G1(float ndotv, float alpha)
{
    float lambda_v = lambdaSmith(ndotv, alpha);
    return 1.0 / (1.0 + lambda_v);
}

float smith_G2(float ndotl, float ndotv, float alpha) //height correlated
{
    float lambda_v = lambdaSmith(ndotv, alpha);
    float lambda_l = lambdaSmith(ndotl, alpha);
    return 1.0 / (1.0 + lambda_v + lambda_l);
}

vec3 trace(Ray ray, inout uint seed) {
    vec3 rayCol = vec3(1.);
    vec3 pixelColor = vec3(0.);

    for (int i = 0; i < PushConstants.bounces + 1; i++) {
        HitInfo hi = intersect(ray);

        if (!hi.hit) {
            vec3 envColor = clamp(texture(envMap, ray.rd).rgb, 0.0, MAX_ENV_MAP_VALUE);
            #ifdef BRDF_DEBUGGING
                envColor = vec3(1.0);
            #endif
            pixelColor += envColor * PushConstants.envMapIntensity * rayCol * clamp(i, PushConstants.envMapVisbility, 1);
            break;
        }
        vec3 hitPos = ray.ro + hi.dist * ray.rd;

        Triangle tri = PushConstants.triangleBuffer.triangles[hi.triIndex];
        Vertex v0 = PushConstants.vertexBuffer.vertices[tri.v0 + hi.vertexOffset];
        Vertex v1 = PushConstants.vertexBuffer.vertices[tri.v1 + hi.vertexOffset];
        Vertex v2 = PushConstants.vertexBuffer.vertices[tri.v2 + hi.vertexOffset];

        vec3 bar = calculateBarycentric(hitPos, v0.pos, v1.pos, v2.pos);
        vec2 uv = bar.x * vec2(v0.uv1, v0.uv2) + bar.y * vec2(v1.uv1, v1.uv2) + bar.z * vec2(v2.uv1, v2.uv2);
        if (PushConstants.smoothShading > 0) {
            hi.normal = bar.x * v0.normal + bar.y * v1.normal + bar.z * v2.normal;
        }

        Surface surface;
        surface.albedo = hi.material.baseCol * texture(nonuniformEXT(textures[hi.material.baseColMapIndex]), uv).rgb;
        surface.roughness = clamp(hi.material.roughness * texture(nonuniformEXT(textures[hi.material.roughnessMapIndex]), uv).g, 0.01, 1.0);
        surface.metallic = hi.material.metallic * texture(nonuniformEXT(textures[hi.material.metallicMapIndex]), uv).b;
        if (hi.material.normalMapIndex > -1) {
            vec3 mapNormal = texture(nonuniformEXT(textures[hi.material.normalMapIndex]), uv).xyz * 2.0 - 1.0;
            mapNormal.xy *= -1.0;

            vec3 bitangent = cross(tri.tangent, hi.normal);
            mat3 TBN = mat3(tri.tangent, bitangent, hi.normal);
            surface.normal = normalize(TBN * mapNormal);
        } else {
            surface.normal = hi.normal;
        }
        // For sampling : https://www.shadertoy.com/view/MX3XDf
        Ray newRay;
        newRay.ro = hitPos + hi.normal * 0.001;
        vec3 brdf = vec3(0.0);
        vec3 H = sampleGGXVNDF(vec2(randomFloat01(seed), randomFloat01(seed)), -ray.rd, surface.roughness, surface.normal);
        float VdotH = max(dot(-ray.rd, H), 0.0);

        vec3 F0 = mix(vec3(0.04), surface.albedo, surface.metallic);
        vec3 F = F_Schlick(F0, VdotH);

        float kD = 1.0 - surface.metallic;
        float kS = luma(F);
        float inv = 1.0 / (kD + kS);
        kD /= inv;
        kS /= inv;


        #ifdef BRDF_DEBUGGING
            newRay.rd = reflect(ray.rd, H);
            brdf = F;
        #else
            if (randomFloat01(seed) > kS) {
                newRay.rd = normalize(hi.normal + randomUnitVector(seed));

                float NdotL = dot(surface.normal, newRay.rd);
                brdf =  surface.albedo / PI;
                float pdf = kD * NdotL / PI;
                if(pdf > 0.0)
                    brdf /= pdf;
            }
            else {
                newRay.rd = reflect(ray.rd, H);
                float NdotL = max(dot(surface.normal, newRay.rd), 0.0);
                float NdotV = max(dot(surface.normal, -ray.rd), 0.0);

                if ( dot(surface.normal, newRay.rd) > 0. && dot(surface.normal, -ray.rd) > 0. ) {
                    float G1 = smith_G1(NdotV, surface.roughness);
                    float G2 = smith_G2(NdotL, NdotV, surface.roughness);
                    brdf = F * G2 / G1;
                    brdf /= kS;
                }
            }
            brdf *= dot(surface.normal, newRay.rd);
        #endif

        pixelColor += (surface.albedo * hi.material.emissiveStrength) * rayCol;
        rayCol *= brdf;

        // early stoppage
        float p = max(rayCol.r, max(rayCol.g, rayCol.b));
        if (randomFloat01(seed) > p) {
            break;
        }
        // Add the energy we 'lose' by randomly terminating paths
        rayCol *= 1.0f / p;

        ray = newRay;
    }

    return pixelColor;
}


void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = 2.0 * (vec2(texelCoord) / (gl_WorkGroupSize.xy * gl_NumWorkGroups.xy)) - 1.0;
    uv.y *= -1.0;

    ivec2 size = imageSize(drawImage);
    if (texelCoord.x < size.x && texelCoord.y < size.y)
    {
        Ray baseRay;
        baseRay.ro = cam.pos;
        // apply the inv projection and view matrices to the classical RT ray direction
        vec4 target = cam.invProj * vec4(uv.x, uv.y, 1.0, 1.0);
        vec3 normalizedTarget = normalize(vec3(target) / target.w);
        baseRay.rd = vec3(cam.invView * vec4(normalizedTarget, 0.0));

        // Multi-sampling
        vec3 col = vec3(0.0);
        for (uint i = 0; i < PushConstants.samples; i++) {
            uint seed = uint(uint(texelCoord.x) * uint(1973) + uint(texelCoord.y) * uint(9277) + uint(PushConstants.frame) * uint(26699)) | i;
            Ray randomRay;
            randomRay.ro = baseRay.ro;
            randomRay.rd = normalize(baseRay.rd + PushConstants.jitter * JITTER_CONSTANT * randomUnitVector(seed));
            col += trace(randomRay, seed) / float(PushConstants.samples);
        }
        // col = max(col, 0.0);

        // Accumulation
        vec3 colPrev = imageLoad(drawImage, texelCoord).rgb;
        col = mix(colPrev, col, 1.0 / (float(PushConstants.frame) + 1));

        imageStore(drawImage, texelCoord, vec4(col, 1.0));
    }
}