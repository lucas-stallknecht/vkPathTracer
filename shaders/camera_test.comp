#version 460

struct Ray {
    vec3 ro;
    vec3 rd;
};


layout (local_size_x = 16, local_size_y = 16) in;

layout(rgba16f,set = 0, binding = 0) uniform image2D image;
layout(set = 0, binding = 1) uniform Camera {
    vec3 camPos;
    mat4 invView;
    mat4 invProj;
};

const vec3 spherePos = vec3(0.0, 0.0, 0.0);
const float sphereRad = 0.5;


bool raySphereIntersect(Ray ray, vec3 pos, float r) {
    float a = dot(ray.rd, ray.rd);
    vec3 s0_r0 = ray.ro - pos;
    float b = 2.0 * dot(ray.rd, s0_r0);
    float c = dot(s0_r0, s0_r0) - (r * r);

    if (b * b - 4.0 * a * c < 0.0) {
        return false;
    }
    // distance to sphere
    float t = (-b - sqrt((b * b) - 4.0 * a * c)) / (2.0 * a);

    return t > 0.0;
}

void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = 2.0 * (vec2(texelCoord) / (gl_WorkGroupSize.xy * gl_NumWorkGroups.xy)) - 1.0;
    uv.y *= -1.0;

    Ray ray;
    ray.ro = camPos;
    // apply the inv projection and view matrices to the classical RT ray direction
    vec4 target = invProj * vec4(uv.x, uv.y, 1.0, 1.0);
    vec3 normalizedTarget = normalize(vec3(target) / target.w);
    ray.rd = vec3(invView * vec4(normalizedTarget, 0.0));

    vec3 outputCol = vec3(0.0);

	ivec2 size = imageSize(image);
    if(texelCoord.x < size.x && texelCoord.y < size.y)
    {
        if(raySphereIntersect(ray, spherePos, sphereRad))
            outputCol = vec3(1.0, 0.0, 0.0);
        imageStore(image, texelCoord, vec4(outputCol, 1.0));
    }
}